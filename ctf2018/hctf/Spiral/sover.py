from z3 import *

#flag1
const=[0x07,0xE7,0x07,0xE4,0x01,0x19,0x03,0x50,0x07,0xE4,0x01,0x20,0x06,0xB7,0x07,0xE4,0x01,0x22,0x00,0x28,0x00,0x2A,0x02,0x54,0x07,0xE4,0x01,0x1F,0x02,0x50,0x05,0xF2,0x04,0xCC,0x07,0xE4,0x00,0x28,0x06,0xB3,0x05,0xF8,0x07,0xE4,0x00,0x28,0x06,0xB2,0x07,0xE4,0x04,0xC0,0x00,0x2F,0x05,0xF8,0x07,0xE4,0x04,0xC0,0x00,0x28,0x05,0xF0,0x07,0xE3,0x00,0x2B,0x04,0xC4,0x05,0xF6,0x03,0x4C,0x04,0xC0,0x07,0xE4,0x05,0xF6,0x06,0xB3,0x01,0x19,0x07,0xE3,0x05,0xF7,0x01,0x1F,0x07,0xE4]
flag1=''
for i in range(46):
    if const[2*i]==0:
        const[2*i+1]-=0x22
    elif const[2*i]==1: 
        const[2*i+1]-=0x13
    elif const[2*i]==2:
        const[2*i+1]-=0x46
    elif const[2*i]==3:
        const[2*i+1]-=0x42
    elif const[2*i]==4:
        const[2*i+1]^=0xCA
    elif const[2*i]==5:
        const[2*i+1]^=0xFE
    elif const[2*i]==6:
        const[2*i+1]^=0xBE
    elif const[2*i]==7:
        const[2*i+1]^=0xEF
    flag1+=chr(const[2*i+1]<<3|const[2*i])
print(flag1)

#flag2
A=[165,89,35,9,512,3,1,6,87,7,206,125,86,5,40,4,2,8,2,6,5,9,240,15,86,118,855,77,77,75,83,1,225,87,7,127,56,111,665,54,2,6,1123,1129,211,106,170,884,198,176,420,50,103,1,8,168,113,2,9,104,50,1525,6,5,93,1,1287,37,8,6,51,9,89,49,952,101,99,40,87,1,163]
table=[[0x0,0x1,0x2,0x3,0x12,0x13,0x14,0x23,0x24],[0x4,0x5,0x6,0x7,0x8,0x15,0x17,0x27,0x37],[0x10,0x20,0x30,0x31,0x40,0x50,0x51,0x52,0x60],[0x11,0x21,0x22,0x32,0x33,0x34,0x35,0x41,0x42],[0x16,0x25,0x26,0x36,0x43,0x44,0x45,0x46,0x54],[0x18,0x28,0x38,0x48,0x58,0x67,0x68,0x78,0x88],[0x47,0x55,0x56,0x57,0x65,0x66,0x76,0x77,0x87],[0x53,0x62,0x63,0x64,0x72,0x74,0x75,0x85,0x86],[0x61,0x70,0x71,0x73,0x80,0x81,0x82,0x83,0x84]]
x=[BitVec('x%d'%i,16)for i in range(27)]
s=Solver()

for i in range(27):
    s.add(And(x[i]>=0x20,x[i]<=0x7F))
while 1:
	A[12]=(A[12]^x[23])&0xFF
	A[1]=(A[1]-x[1])&0xFF
	A[29]=(A[29]^(x[18]+x[17]-x[16]))&0xFF
	A[0]=(A[0]+x[0])&0xFF
	A[14]=(A[14]^x[4])&0xFF
	A[26]=(A[26]^(x[19]<<4))&0xFF
	A[25]=(A[25]^x[6])&0xFF
	A[11]=(A[11]-x[3])&0xFF
	A[24]=(A[24]^x[20])&0xFF
	A[8]=(A[8]-x[25])&0xFF
	A[10]=(A[10]+x[24])&0xFF
	A[23]=(A[23]^(x[4]+x[5]-x[6]))&0xFF
	A[27]=(A[27]^(x[8]^x[6]^x[5]+x[7]-x[9]))&0xFF
	A[22]=(A[22]/x[21])&0xFF
	A[2]=(A[2]-x[26])&0xFF
	A[21]=(A[21]^(x[21]^x[23]^x[24]+x[22]-x[20]))&0xFF
	A[28]=(A[28]-x[18])&0xFF
	A[4]=(A[4]/x[2])&0xFF
	
	A[48]=(A[48]/x[9])&0xFF
	A[32]=(A[32]+x[9])&0xFF
	A[38]=(A[38]/x[10])&0xFF
	A[35]=(A[35]^(x[16]+x[15]-x[14]))&0xFF
	A[45]=(A[45]-x[13])&0xFF
	A[37]=(A[37]^x[13])&0xFF
	A[50]=(A[50]/x[15])&0xFF
	A[52]=(A[52]-x[16])&0xFF
	A[36]=(A[36]-x[14])&0xFF
	A[43]=(A[43]^(x[11]<<4))&0xFF
	A[42]=(A[42]^(x[11]<<4))&0xFF
	A[39]=(A[39]-x[12])&0xFF
	A[33]=(A[33]^x[16])&0xFF
	A[47]=(A[47]^(x[14]<<4))&0xFF
	A[49]=(A[49]+x[8])&0xFF
	A[46]=(A[46]+x[10])&0xFF
	A[44]=(A[44]+x[12])&0xFF
	A[30]=(A[30]^x[8])&0xFF
	
	A[72]=(A[72]^(x[24]^x[22]^x[21]+x[23]-x[25]))&0xFF
	A[67]=(A[67]-x[4])&0xFF
	A[64]=(A[64]^x[20])&0xFF
	A[75]=(A[75]^(x[24]+x[25]-x[26]))&0xFF
	A[74]=(A[74]/x[3])&0xFF
	A[61]=(A[61]^(x[5]<<4))&0xFF
	A[80]=(A[80]+x[0])&0xFF
	A[59]=(A[59]^(x[17]+x[18]-x[19]))&0xFF
	A[78]=(A[78]^x[1])&0xFF
	A[77]=(A[77]-x[26])&0xFF
	A[73]=(A[73]^x[24])&0xFF
	A[56]=(A[56]^x[6])&0xFF
	A[66]=(A[66]^(x[21]<<4))&0xFF
	A[51]=(A[51]-x[7])&0xFF
	A[55]=(A[55]+x[17])&0xFF
	A[60]=(A[60]^x[19])&0xFF
	A[76]=(A[76]^(x[3]+x[2]-x[1]))&0xFF
	A[70]=(A[70]-x[22])&0xFF
	break

for n in range(9):
    t=[0,0,0,0,0,0,0,0,0]
    for i in range(9):
       t[i]=A[(table[n][i]&0xF)+9*((table[n][i]>>4)&0xF)]
       s.add(And(t[i]>=1,t[i]<=9))
    for j in range(8):
        for k in range(j+1,9):
            s.add(t[j]!=t[k])
			
assert(s.check()==sat)
m=s.model()
flag2=''
for i in x:
    flag2+=chr(m[i].as_long())
flag="hctf{"+flag1+flag2+"}"
print(flag)